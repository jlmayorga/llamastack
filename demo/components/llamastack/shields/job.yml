---
apiVersion: batch/v1
kind: Job
metadata:
  name: llamastack-shield-registration
  namespace: summit-connect-2025
  annotations:
    openshift.io/display-name: "Shield Registration Job"
    app.openshift.io/connects-to: '[{"apiVersion":"llamastack.io/v1alpha1","kind":"LlamaStackDistribution","name":"llamastack-trustyai-fms"}]'
    app.openshift.io/runtime: bash
  labels:
    app: llamastack-shield-registration
    app.kubernetes.io/name: llamastack-shield-registration
    app.kubernetes.io/component: shield-registration
    app.kubernetes.io/part-of: llamastack-trustyai-demo
spec:
  # Allow 3 retries if the job fails
  backoffLimit: 3
  # Clean up completed jobs after 24 hours
  ttlSecondsAfterFinished: 86400
  template:
    metadata:
      labels:
        app: llamastack-shield-registration
        job-name: llamastack-shield-registration
    spec:
      restartPolicy: OnFailure
      serviceAccountName: llamastack-shield-registration
      containers:
      - name: register-shields
        image: registry.access.redhat.com/ubi9/ubi-minimal:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e

          LLAMASTACK_URL="http://llamastack-trustyai-fms-service:8321"
          MAX_RETRIES=30
          RETRY_DELAY=10

          echo "============================================================"
          echo "LlamaStack Shield Registration"
          echo "============================================================"
          echo "LlamaStack URL: $LLAMASTACK_URL"
          echo ""

          # Wait for LlamaStack to be ready
          echo "Waiting for LlamaStack to be ready..."
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -sf "$LLAMASTACK_URL/v1/shields" > /dev/null 2>&1; then
              echo "✓ LlamaStack is ready (attempt $i/$MAX_RETRIES)"
              break
            fi
            if [ $i -eq $MAX_RETRIES ]; then
              echo "✗ Failed to connect after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "  Attempt $i/$MAX_RETRIES failed, retrying in ${RETRY_DELAY}s..."
            sleep $RETRY_DELAY
          done

          echo ""
          echo "Registering shields..."
          echo "------------------------------------------------------------"

          # Register PII Shield
          echo "→ Registering PII Shield..."
          RESPONSE=$(curl -s -X POST "$LLAMASTACK_URL/v1/shields" \
            -H "Content-Type: application/json" \
            -d '{
              "shield_id": "pii_shield",
              "provider_shield_id": "pii_shield",
              "provider_id": "trustyai_fms",
              "params": {
                "type": "content",
                "confidence_threshold": 0.8,
                "message_types": ["user", "system", "tool", "completion"],
                "detectors": {
                  "regex": {
                    "detector_params": {
                      "regex": ["email", "ssn", "credit-card"]
                    }
                  }
                }
              }
            }')

          if echo "$RESPONSE" | grep -q "identifier"; then
            echo "✓ PII Shield registered successfully"
          else
            echo "⚠ PII Shield registration: $RESPONSE"
          fi

          # Register HAP Shield
          echo "→ Registering HAP Shield..."
          RESPONSE=$(curl -s -X POST "$LLAMASTACK_URL/v1/shields" \
            -H "Content-Type: application/json" \
            -d '{
              "shield_id": "hap",
              "provider_shield_id": "hap",
              "provider_id": "trustyai_fms",
              "params": {
                "type": "content",
                "confidence_threshold": 0.5,
                "message_types": ["user", "system", "tool", "completion"],
                "detectors": {
                  "hap": {
                    "detector_params": {}
                  }
                }
              }
            }')

          if echo "$RESPONSE" | grep -q "identifier"; then
            echo "✓ HAP Shield registered successfully"
          else
            echo "⚠ HAP Shield registration: $RESPONSE"
          fi

          echo ""
          echo "============================================================"
          echo "✓ Shield registration completed!"
          echo ""
          echo "Available shields:"
          curl -sf "$LLAMASTACK_URL/v1/shields" | grep -o '"identifier":"[^"]*"' || echo "  (Could not list shields)"
          echo "============================================================"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
