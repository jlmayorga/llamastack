version: '2'
image_name: vllm
apis:
- agents
- datasetio
- eval
- inference
- safety
- shields
- scoring
- tool_runtime
- vector_io
- telemetry
providers:
  inference:
  - provider_id: vllm
    provider_type: remote::vllm
    config:
      url: "http://llama32-1b-predictor:8080/v1"
      tls_verify: false
      #api_token: ${env.VLLM_API_TOKEN:fake}
      #max_tokens: 12000
      #tls_verify: false
  - provider_id: sentence-transformers
    provider_type: inline::sentence-transformers
    config: {}
  - provider_id: vllm-safety
    provider_type: remote::vllm
    config:
      url: http://llama-guard-3-1b-predictor:8080/v1
      max_tokens: 4096
      api_token: ${env.VLLM_API_TOKEN:fake}
      tls_verify: false
  agents:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      persistence_store:
        type: sqlite
        db_path: ${env.SQLITE_STORE_DIR:=~/.llama/distributions/rh}/agents_store.db
      responses_store:
        type: sqlite
        db_path: ${env.SQLITE_STORE_DIR:=~/.llama/distributions/rh}/responses_store.db
  eval:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      kvstore:
        type: sqlite
        namespace: null
        db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/meta_reference_eval.db
  datasetio:
  - provider_id: huggingface
    provider_type: remote::huggingface
    config:
      kvstore:
        type: sqlite
        namespace: null
        db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/huggingface_datasetio.db
  - provider_id: localfs
    provider_type: inline::localfs
    config:
      kvstore:
        type: sqlite
        namespace: null
        db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/localfs_datasetio.db
  safety:
  - provider_id: llama-guard
    provider_type: inline::llama-guard
    config:
      excluded_categories: []
  #- provider_id: trustyai_fms
  #  provider_type: remote::trustyai_fms
  #  config:
  #    orchestrator_url: ${env.FMS_ORCHESTRATOR_URL:=}
  #    ssl_cert_path: ${env.FMS_SSL_CERT_PATH:=}
  #    shields: {}
  scoring:
  - provider_id: basic
    provider_type: inline::basic
    config: {}
  - provider_id: llm-as-judge
    provider_type: inline::llm-as-judge
    config: {}
  - provider_id: braintrust
    provider_type: inline::braintrust
    config:
      openai_api_key: ${env.OPENAI_API_KEY:}
  telemetry:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      service_name: ${env.OTEL_SERVICE_NAME:llama-stack}
      sinks: console,sqlite
      otel_trace_endpoint: ${env.OTEL_TRACE_ENDPOINT:}
      sqlite_db_path: ${env.SQLITE_DB_PATH:~/.llama/distributions/remote-vllm/trace_store.db}
  tool_runtime:
  - provider_id: tavily-search
    provider_type: remote::tavily-search
    config: {}
      #api_key: ${env.TAVILY_API_KEY}
      #max_results: 3
  - provider_id: rag-runtime
    provider_type: inline::rag-runtime
    config: {}
  - provider_id: model-context-protocol
    provider_type: remote::model-context-protocol
    config: {}
metadata_store:
  type: sqlite
  db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/registry.db
models:
- metadata: {}
  model_id: llama32-1b
  provider_id: vllm
  provider_model_id: llama32-1b
  model_type: llm
- metadata:
    embedding_dimension: 384
  model_id: all-MiniLM-L6-v2
  provider_id: sentence-transformers
  model_type: embedding
- metadata: {}
  model_id: meta-llama/Llama-Guard-3-1B
  #provider_model_id: llama-guard-3-1b
  provider_id: vllm-safety
  model_type: llm
datasets: []
vector_dbs: []
scoring_fns: []
benchmarks: []
shields:
#- shield_id: email_hap
#  provider_id: trustyai_fms
  - shield_id: meta-llama/Llama-Guard-3-1B
tool_groups:
- provider_id: tavily-search
  toolgroup_id: builtin::websearch
- toolgroup_id: builtin::rag
  provider_id: rag-runtime
- toolgroup_id: mcp::openshift
  provider_id: model-context-protocol
  mcp_endpoint:
    uri: http://ocp-mcp-server:8000/sse
# - toolgroup_id: mcp::slack
#   provider_id: model-context-protocol
#   mcp_endpoint:
#     uri: "http://slack-mcp-server:80/sse"
external_providers_dir: /opt/app-root/src/.llama/providers.d
